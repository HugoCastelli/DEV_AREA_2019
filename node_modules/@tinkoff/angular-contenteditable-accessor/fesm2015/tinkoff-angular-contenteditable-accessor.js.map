{"version":3,"file":"tinkoff-angular-contenteditable-accessor.js.map","sources":["ng://@tinkoff/angular-contenteditable-accessor/lib/contenteditable-value-accessor.ts","ng://@tinkoff/angular-contenteditable-accessor/lib/module.ts"],"sourcesContent":["import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    Inject,\n    OnDestroy,\n    Renderer2,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n/*\n * This is a barebones contenteditable {@link ControlValueAccessor} allowing you to use\n * Angular forms with native contenteditable HTML. For security reasons you might want\n * to consider sanitizing pasted/dropped content before using it. Also make sure that\n * you do not set any dangerous content as control value yourself, because directive\n * just outputs control value as-is.\n */\n@Directive({\n    selector:\n        '[contenteditable][formControlName], [contenteditable][formControl], [contenteditable][ngModel]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ContenteditableValueAccessor),\n            multi: true,\n        },\n    ],\n})\nexport class ContenteditableValueAccessor\n    implements ControlValueAccessor, AfterViewInit, OnDestroy {\n    /*\n     * MutationObserver IE11 fallback (as opposed to input event for modern browsers).\n     * When mutation removes a tag, i.e. delete is pressed on the last remaining character\n     * inside a tag â callback is triggered before the DOM is actually changed, therefore\n     * setTimeout is used\n     */\n    private observer = new MutationObserver(() => {\n        setTimeout(() => {\n            this.onChange(\n                ContenteditableValueAccessor.processValue(\n                    this.elementRef.nativeElement.innerHTML,\n                ),\n            );\n        });\n    });\n\n    /*\n     * onTouch callback that marks control as touched and allows FormHooks use\n     */\n    private onTouched = () => {};\n\n    /*\n     * onChange callback that writes value to control and allows FormHooks use\n     */\n    private onChange: (value: string) => void = () => {};\n\n    constructor(\n        @Inject(ElementRef) private readonly elementRef: ElementRef,\n        @Inject(Renderer2) private readonly renderer: Renderer2,\n    ) {}\n\n    /*\n     * To support IE11 MutationObserver is used to monitor changes to the content\n     */\n    ngAfterViewInit() {\n        this.observer.observe(this.elementRef.nativeElement, {\n            characterData: true,\n            childList: true,\n            subtree: true,\n        });\n    }\n\n    /*\n     * Disconnect MutationObserver IE11 fallback on destroy\n     */\n    ngOnDestroy() {\n        this.observer.disconnect();\n    }\n\n    /*\n     * Listen to input events to write innerHTML value into control,\n     * also disconnect MutationObserver as it is not needed if this\n     * event works in current browser\n     */\n    @HostListener('input')\n    onInput() {\n        this.observer.disconnect();\n        this.onChange(\n            ContenteditableValueAccessor.processValue(\n                this.elementRef.nativeElement.innerHTML,\n            ),\n        );\n    }\n\n    /*\n     * Listen to blur event to mark control as touched\n     */\n    @HostListener('blur')\n    onBlur() {\n        this.onTouched();\n    }\n\n    /*\n     * Reacts to external change\n     *\n     * @see {@link ControlValueAccessor#writeValue}\n     */\n    writeValue(value: string | null) {\n        this.renderer.setProperty(\n            this.elementRef.nativeElement,\n            'innerHTML',\n            ContenteditableValueAccessor.processValue(value),\n        );\n    }\n\n    /*\n     * Registers onChange callback\n     *\n     * @see {@link ControlValueAccessor#registerOnChange}\n     */\n    registerOnChange(onChange: (value: string) => void) {\n        this.onChange = onChange;\n    }\n\n    /*\n     * Registers onTouch callback\n     *\n     * @see {@link ControlValueAccessor#registerOnTouched}\n     */\n    registerOnTouched(onTouched: () => void) {\n        this.onTouched = onTouched;\n    }\n\n    /*\n     * Sets disabled state by setting contenteditable attribute to true/false\n     *\n     * @see {@link ControlValueAccessor#setDisabledState}\n     */\n    setDisabledState(disabled: boolean) {\n        this.renderer.setAttribute(\n            this.elementRef.nativeElement,\n            'contenteditable',\n            String(!disabled),\n        );\n    }\n\n    /*\n     * null and other falsy control values are treated as empty string to\n     * prevent IE11 outputting 'null', also single <br> is replaced with empty\n     * string when passed to the control\n     */\n    private static processValue(value: string | null): string {\n        const processed = value || '';\n\n        return processed.trim() === '<br>' ? '' : processed;\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {ContenteditableValueAccessor} from './contenteditable-value-accessor';\n\n@NgModule({\n    declarations: [ContenteditableValueAccessor],\n    exports: [ContenteditableValueAccessor],\n})\nexport class ContenteditableValueAccessorModule {}\n"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;AA8BA,MAAa,4BAA4B;;;;;IA4BrC,YACyC,UAAsB,EACvB,QAAmB;QADlB,eAAU,GAAV,UAAU,CAAY;QACvB,aAAQ,GAAR,QAAQ,CAAW;;;;;;;QAtBnD,aAAQ,GAAG,IAAI,gBAAgB;;;QAAC;YACpC,UAAU;;;YAAC;gBACP,IAAI,CAAC,QAAQ,CACT,4BAA4B,CAAC,YAAY,CACrC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAC1C,CACJ,CAAC;aACL,EAAC,CAAC;SACN,EAAC,CAAC;;;;QAKK,cAAS;;;QAAG,SAAQ,EAAC;;;;QAKrB,aAAQ;;;QAA4B,SAAQ,EAAC;KAKjD;;;;;;;IAKJ,eAAe;QACX,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;YACjD,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,IAAI;SAChB,CAAC,CAAC;KACN;;;;;;;IAKD,WAAW;QACP,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;KAC9B;;;;;;;;;IAQD,OAAO;QACH,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CACT,4BAA4B,CAAC,YAAY,CACrC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAC1C,CACJ,CAAC;KACL;;;;;;;IAMD,MAAM;QACF,IAAI,CAAC,SAAS,EAAE,CAAC;KACpB;;;;;;;;;;IAOD,UAAU,CAAC,KAAoB;QAC3B,IAAI,CAAC,QAAQ,CAAC,WAAW,CACrB,IAAI,CAAC,UAAU,CAAC,aAAa,EAC7B,WAAW,EACX,4BAA4B,CAAC,YAAY,CAAC,KAAK,CAAC,CACnD,CAAC;KACL;;;;;;;;;;IAOD,gBAAgB,CAAC,QAAiC;QAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;;;;;;;;;IAOD,iBAAiB,CAAC,SAAqB;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;;;;;;;;;IAOD,gBAAgB,CAAC,QAAiB;QAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,CACtB,IAAI,CAAC,UAAU,CAAC,aAAa,EAC7B,iBAAiB,EACjB,MAAM,CAAC,CAAC,QAAQ,CAAC,CACpB,CAAC;KACL;;;;;;;;;;;IAOO,OAAO,YAAY,CAAC,KAAoB;;cACtC,SAAS,GAAG,KAAK,IAAI,EAAE;QAE7B,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,MAAM,GAAG,EAAE,GAAG,SAAS,CAAC;KACvD;;;YA1IJ,SAAS,SAAC;gBACP,QAAQ,EACJ,gGAAgG;gBACpG,SAAS,EAAE;oBACP;wBACI,OAAO,EAAE,iBAAiB;wBAC1B,WAAW,EAAE,UAAU;;;wBAAC,MAAM,4BAA4B,EAAC;wBAC3D,KAAK,EAAE,IAAI;qBACd;iBACJ;aACJ;;;;YA1BG,UAAU,uBAwDL,MAAM,SAAC,UAAU;YAnDtB,SAAS,uBAoDJ,MAAM,SAAC,SAAS;;;sBA0BpB,YAAY,SAAC,OAAO;qBAapB,YAAY,SAAC,MAAM;;;;;;;ACnGxB,MAOa,kCAAkC;;;YAJ9C,QAAQ,SAAC;gBACN,YAAY,EAAE,CAAC,4BAA4B,CAAC;gBAC5C,OAAO,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;;"}
